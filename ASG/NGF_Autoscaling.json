{
   "AWSTemplateFormatVersion":"2010-09-09",
   "Description":"Barracuda CloudGen Firewall - Auto Scaling Cluster ",
   "Metadata":{
      "AWS::CloudFormation::Interface":{
         "ParameterGroups":[
            {
               "Label":{
                  "default":"Auto Scaling Group Settings"
               },
               "Parameters":[
                  "InitialSize",
                  "MaxSize",
                  "HighThreshold",
                  "LowThreshold"
               ]
            },
            {
               "Label":{
                  "default":"Launch Configuration Settings"
               },
               "Parameters":[
                  "InstanceType",
                  "IAMProfile",
                  "ReleaseVersion"
               ]
            },
            {
               "Label":{
                  "default":"Networking - VPC"
               },
               "Parameters":[
                  "VpcAddress"
               ]
            },
            {
               "Label":{
                  "default":"Networking - Zone A"
               },
               "Parameters":[
                  "PrivateSubnetAAddress",
                  "PublicSubnetAAddress",
                  "ZoneA"
               ]
            },
            {
               "Label":{
                  "default":"Networking - Zone B"
               },
               "Parameters":[
                  "PrivateSubnetBAddress",
                  "PublicSubnetBAddress",
                  "ZoneB"
               ]
            },
            {
               "Label":{
                  "default":"SSL VPN Settings (optional)"
               },
               "Parameters":[
                  "SSLCertificateId"
               ]
            }
         ],
         "ParameterLabels":{
            "InitialSize":{
               "default":"Minimum Size"
            },
            "MaxSize":{
               "default":"Maximum Size"
            },
            "HighThreshold":{
               "default":"Scale-out Trigger"
            },
            "LowThreshold":{
               "default":"Scale-In Trigger"
            },
            "InstanceType":{
               "default":"Instance Type"
            },
            "IAMProfile":{
               "default":"IAM Profile"
            },
            "ReleaseVersion":{
               "default":"Release Version"
            },
            "VpcAddress":{
               "default":"VPC Address"
            },
            "PrivateSubnetAAddress":{
               "default":"Private Subnet in Zone A"
            },
            "PrivateSubnetBAddress":{
               "default":"Private Subnet in Zone B"
            },
            "PublicSubnetAAddress":{
               "default":"Public Subnet in Zone A"
            },
            "PublicSubnetBAddress":{
               "default":"Public Subnet in Zone B"
            },
            "ZoneA":{
               "default":"Zone (A) to deploy to"
            },
            "ZoneB":{
               "default":"Zone (B) to deploy to"
            },
            "MgmtACL":{
               "default":"Management ACL"
            }
         }
      }
   },
   "Parameters":{
      "InitialSize":{
         "Description":"Initial size of the Auto Scaling Group.",
         "Type":"Number",
         "Default":"1",
         "MinValue":"1",
         "ConstraintDescription":"Initial size of the group cannot be less than 1"
      },
      "MaxSize":{
         "Description":"Maximum number of instances in the Auto Scaling Group.",
         "Type":"Number",
         "Default":"5",
         "MinValue":"2",
         "MaxValue":"248",
         "ConstraintDescription":"Maximum size of the group must be higher than initial size."
      },
      "InstanceType":{
         "Description":"Select the EC2 instance type, Recommended: c5, c5n, m5 or t3",
         "Type":"String",
         "Default":"c5.large",
         "AllowedValues":[
            "t3.small",
            "t3.medium",
            "t3.xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge"
         ]
      },
      "IAMProfile":{
         "Description":"Select the IAM Role for the NextGen Firewall.",
         "Type":"String",
         "Default":"NextGenFirewallRole"
      },
      "SSLCertificateId":{
         "Description":"SSL Certificate ARN. Leave empty if SSL VPN is not used.",
         "Type":"String",
         "AllowedPattern":"(^$)|(^arn:aws:acm.*)"
      },
      "HighThreshold":{
         "Description":"Maximum number of VPN sessions per instance.",
         "Type":"Number",
         "Default":"200"
      },
      "LowThreshold":{
         "Description":"Number of VPN sessions to trigger scaling in.",
         "Type":"Number",
         "Default":"80"
      },
      "VpcAddress":{
         "Description":"IP address space for new VPC",
         "Type":"String",
         "Default":"192.168.0.0/16",
         "AllowedPattern":"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
         "ConstraintDescription":"Use valid CIDR notation"
      },
      "PrivateSubnetAAddress":{
         "Description":"Private subnet hosting firewalls in A zone. Must be within VPC address space.",
         "Type":"String",
         "Default":"192.168.254.0/24",
         "AllowedPattern":"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
      },
      "PublicSubnetAAddress":{
         "Description":"Public helper subnet in A zone. Must be within VPC address space.",
         "Type":"String",
         "Default":"192.168.0.0/24",
         "AllowedPattern":"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
      },
      "PrivateSubnetBAddress":{
         "Description":"Private subnet hosting firewalls in B zone. Must be within VPC address space.",
         "Type":"String",
         "Default":"192.168.255.0/24",
         "AllowedPattern":"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
      },
      "PublicSubnetBAddress":{
         "Description":"Public helper subnet in B zone. Must be within VPC address space.",
         "Type":"String",
         "Default":"192.168.1.0/24",
         "AllowedPattern":"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
      },
      "ZoneA":{
         "Description":"",
         "Type":"AWS::EC2::AvailabilityZone::Name"
      },
      "ZoneB":{
         "Description":"",
         "Type":"AWS::EC2::AvailabilityZone::Name"
      },
      "MgmtACL":{
         "Description":"Allow access to management IP only from these addresses (CIDR notation)",
         "Type":"String",
         "Default":"0.0.0.0/0",
         "AllowedPattern":"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
      },
   "ReleaseVersion":{
         "Description":"Which release do you want to deploy?",
         "Type":"String",
         "Default":"9.0.4",
         "AllowedValues":[
            "8.3.3",
            "9.0.4"
         ]
      }
   },
  "Mappings":{
      "amiMapMap":{
         "8.3.3":{
            "mapName":"amiMapv833"
         },
         "9.0.4":{
            "mapName":"amiMapv904"
         }
      },
      "amiMapv833":{
         "us-east-1":{
            "Hourly":"ami-0057f77811485311f"
         },
         "us-east-2":{
            "Hourly":"ami-089bbc53d9c9f6b49"
         },
         "us-west-1":{
            "Hourly":"ami-09b069f5303516d98"
         },
         "us-west-2":{
            "Hourly":"ami-0b8fca301c229702f"
         },
         "ap-south-1":{
            "Hourly":"ami-08fcff2f6b0d184f1"
         },
         "ap-northeast-3":{
            "Hourly":"ami-027db5b16ea37d059"
         },
         "ap-northeast-2":{
            "Hourly":"ami-07545ae677b1a3780"
         },
         "ap-southeast-1":{
            "Hourly":"ami-0db2591b69fb86f98"
         },
         "ap-southeast-2":{
            "Hourly":"ami-04fa5ae43d41c5c65"
         },
         "ap-northeast-1":{
            "Hourly":"ami-03f68ba9f81638719"
         },
         "ca-central-1":{
            "Hourly":"ami-0c087d5e20f963e33"
         },
         "eu-central-1":{
            "Hourly":"ami-0528a65148741e2df"
         },
         "eu-west-1":{
            "Hourly":"ami-0db5b1acc6cdefec0"
         },
         "eu-west-2":{
            "Hourly":"ami-07f009686642fc4c4"
         },
         "eu-west-3":{
            "Hourly":"ami-0559d0e00962da209"
         },
         "eu-north-1":{
            "Hourly":"ami-0cb0dddd5353fdb73"
         },
         "sa-east-1":{
            "Hourly":"ami-088fb709e478c6370"
         }
      },
      "amiMapv904":{
        "us-east-1":{
           "Hourly":"ami-08895dd0fbaaf57fd"
        },
        "us-east-2":{
           "Hourly":"ami-002ec9e71b7aad9a9"
        },
        "us-west-1":{
           "Hourly":"ami-0ce19ab56fa7b1d66"
        },
        "us-west-2":{
           "Hourly":"ami-0efcd924afddaf0ce"
        },
        "ap-south-1":{
           "Hourly":"ami-05514a781f24fc54e"
        },
        "ap-northeast-3":{
           "Hourly":"ami-06a28b671645266d4"
        },
        "ap-northeast-2":{
           "Hourly":"ami-064ec71dc0c60766f"
        },
        "ap-southeast-1":{
           "Hourly":"ami-01be37ccdbcacaab5"
        },
        "ap-southeast-2":{
           "Hourly":"ami-08b3c926568af5539"
        },
        "ap-northeast-1":{
           "Hourly":"ami-07cbffd74f1716d49"
        },
        "ca-central-1":{
           "Hourly":"ami-0053ce24ffaa71dd3"
        },
        "eu-central-1":{
           "Hourly":"ami-04c0d34e012354fcf"
        },
        "eu-west-1":{
           "Hourly":"ami-0fd5bdcbee51abbb3"
        },
        "eu-west-2":{
           "Hourly":"ami-0f803ead6ae0f80e2"
        },
        "eu-west-3":{
           "Hourly":"ami-06211c9de56731379"
        },
        "eu-north-1":{
           "Hourly":"ami-0019543db566adbeb"
        },
        "sa-east-1":{
           "Hourly":"ami-0f7bcca1da137c3c2"
        }
     }
    },
   "Conditions":{
      "SSLVPNCert":{
         "Fn::Not":[
            {
               "Fn::Equals":[
                  {
                     "Ref":"SSLCertificateId"
                  },
                  ""
               ]
            }
         ]
      }
   },
   "Resources":{
      "PublicSecurityGroup":{
         "Type":"AWS::EC2::SecurityGroup",
         "Properties":{
            "GroupDescription":"Security group for the Service ELB",
            "VpcId":{
               "Ref":"VPC"
            },
            "SecurityGroupIngress":[
               {
                  "IpProtocol":"-1",
                  "FromPort":-1,
                  "ToPort":-1,
                  "CidrIp":"0.0.0.0/0"
               }
            ]
         }
      },
      "MgmtSecurityGroup":{
         "Type":"AWS::EC2::SecurityGroup",
         "Properties":{
            "GroupDescription":"Security group for the Management ELB",
            "VpcId":{
               "Ref":"VPC"
            },
            "SecurityGroupIngress":[
               {
                  "IpProtocol":"TCP",
                  "FromPort":807,
                  "ToPort":807,
                  "CidrIp":{
                     "Ref":"MgmtACL"
                  }
               },
               {
                  "IpProtocol":"TCP",
                  "FromPort":22,
                  "ToPort":22,
                  "CidrIp":{
                     "Ref":"MgmtACL"
                  }
               }
            ]
         }
      },
      "NGFSecurityGroup":{
         "Type":"AWS::EC2::SecurityGroup",
         "Properties":{
            "GroupDescription":"Security group for the ASG",
            "VpcId":{
               "Ref":"VPC"
            },
            "SecurityGroupIngress":[
               {
                  "IpProtocol":"TCP",
                  "FromPort":807,
                  "ToPort":807,
                  "SourceSecurityGroupId":{
                     "Ref":"MgmtSecurityGroup"
                  }
               },
               {
                  "IpProtocol":"TCP",
                  "FromPort":22,
                  "ToPort":22,
                  "SourceSecurityGroupId":{
                     "Ref":"MgmtSecurityGroup"
                  }
               },
               {
                  "IpProtocol":"-1",
                  "FromPort":-1,
                  "ToPort":-1,
                  "SourceSecurityGroupId":{
                     "Ref":"PublicSecurityGroup"
                  }
               }
            ]
         }
      },
      "NGFSecurityGroupIngressToControl":{
         "Type":"AWS::EC2::SecurityGroupIngress",
         "Properties":{
            "GroupId":{
               "Ref":"NGFSecurityGroup"
            },
            "IpProtocol":"tcp",
            "FromPort":801,
            "ToPort":801,
            "SourceSecurityGroupId":{
               "Ref":"NGFSecurityGroup"
            }
         }
      },
      "NGFSecurityGroupIngressToConfig":{
         "Type":"AWS::EC2::SecurityGroupIngress",
         "Properties":{
            "GroupId":{
               "Ref":"NGFSecurityGroup"
            },
            "IpProtocol":"tcp",
            "FromPort":809,
            "ToPort":809,
            "SourceSecurityGroupId":{
               "Ref":"NGFSecurityGroup"
            }
         }
      },
      "NGFSecurityGroupIngressToMgmtAccess":{
         "Type":"AWS::EC2::SecurityGroupIngress",
         "Properties":{
            "GroupId":{
               "Ref":"NGFSecurityGroup"
            },
            "IpProtocol":"tcp",
            "FromPort":807,
            "ToPort":807,
            "SourceSecurityGroupId":{
               "Ref":"NGFSecurityGroup"
            }
         }
      },
      "VPC":{
         "Type":"AWS::EC2::VPC",
         "Properties":{
            "CidrBlock":{
               "Ref":"VpcAddress"
            },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Fn::Join":[
                        "-",
                        [
                           {
                              "Ref":"AWS::StackName"
                           },
                           "VPC"
                        ]
                     ]
                  }
               }
            ]
         }
      },
      "PrivateSubnetA":{
         "Type":"AWS::EC2::Subnet",
         "Properties":{
            "AvailabilityZone":{
               "Ref":"ZoneA"
            },
            "CidrBlock":{
               "Ref":"PrivateSubnetAAddress"
            },
            "MapPublicIpOnLaunch":false,
            "VpcId":{
               "Ref":"VPC"
            }
         }
      },
      "PublicSubnetA":{
         "Type":"AWS::EC2::Subnet",
         "Properties":{
            "AvailabilityZone":{
               "Ref":"ZoneA"
            },
            "CidrBlock":{
               "Ref":"PublicSubnetAAddress"
            },
            "VpcId":{
               "Ref":"VPC"
            }
         }
      },
      "PrivateSubnetB":{
         "Type":"AWS::EC2::Subnet",
         "Properties":{
            "AvailabilityZone":{
               "Ref":"ZoneB"
            },
            "CidrBlock":{
               "Ref":"PrivateSubnetBAddress"
            },
            "MapPublicIpOnLaunch":false,
            "VpcId":{
               "Ref":"VPC"
            }
         }
      },
      "PublicSubnetB":{
         "Type":"AWS::EC2::Subnet",
         "Properties":{
            "AvailabilityZone":{
               "Ref":"ZoneB"
            },
            "CidrBlock":{
               "Ref":"PublicSubnetBAddress"
            },
            "VpcId":{
               "Ref":"VPC"
            }
         }
      },
      "IGW":{
         "Type":"AWS::EC2::InternetGateway"
      },
      "IGWAttachment":{
         "Type":"AWS::EC2::VPCGatewayAttachment",
         "Properties":{
            "VpcId":{
               "Ref":"VPC"
            },
            "InternetGatewayId":{
               "Ref":"IGW"
            }
         }
      },
      "S3":{
         "Type":"AWS::S3::Bucket",
         "Properties":{
            "AccessControl":"Private",
            "VersioningConfiguration":{
               "Status":"Enabled"
            }
         }
      },
      "ElasticIPA":{
         "Type":"AWS::EC2::EIP",
         "Properties":{
            "Domain":"vpc"
         },
         "DependsOn":[
            "IGWAttachment"
         ]
      },
      "ElasticIPB":{
         "Type":"AWS::EC2::EIP",
         "Properties":{
            "Domain":"vpc"
         },
         "DependsOn":[
            "IGWAttachment"
         ]
      },
      "NATGWA":{
         "Type":"AWS::EC2::NatGateway",
         "Properties":{
            "AllocationId":{
               "Fn::GetAtt":[
                  "ElasticIPA",
                  "AllocationId"
               ]
            },
            "SubnetId":{
               "Ref":"PublicSubnetA"
            }
         },
         "DependsOn":[
            "IGWAttachment"
         ]
      },
      "NATGWB":{
         "Type":"AWS::EC2::NatGateway",
         "Properties":{
            "AllocationId":{
               "Fn::GetAtt":[
                  "ElasticIPB",
                  "AllocationId"
               ]
            },
            "SubnetId":{
               "Ref":"PublicSubnetB"
            }
         },
         "DependsOn":[
            "IGWAttachment"
         ]
      },
      "PublicSubnetRouteTable":{
         "Type":"AWS::EC2::RouteTable",
         "Properties":{
            "VpcId":{
               "Ref":"VPC"
            }
         }
      },
      "PrivateSubnetRouteTableA":{
         "Type":"AWS::EC2::RouteTable",
         "Properties":{
            "VpcId":{
               "Ref":"VPC"
            }
         }
      },
      "PrivateSubnetRouteTableB":{
         "Type":"AWS::EC2::RouteTable",
         "Properties":{
            "VpcId":{
               "Ref":"VPC"
            }
         }
      },
      "PublicDefaultRoute":{
         "Type":"AWS::EC2::Route",
         "DependsOn":"IGWAttachment",
         "Properties":{
            "DestinationCidrBlock":"0.0.0.0/0",
            "GatewayId":{
               "Ref":"IGW"
            },
            "RouteTableId":{
               "Ref":"PublicSubnetRouteTable"
            }
         }
      },
      "PrivateDefaultRouteA":{
         "Type":"AWS::EC2::Route",
         "Properties":{
            "DestinationCidrBlock":"0.0.0.0/0",
            "NatGatewayId":{
               "Ref":"NATGWA"
            },
            "RouteTableId":{
               "Ref":"PrivateSubnetRouteTableA"
            }
         }
      },
      "PrivateDefaultRouteB":{
         "Type":"AWS::EC2::Route",
         "Properties":{
            "DestinationCidrBlock":"0.0.0.0/0",
            "NatGatewayId":{
               "Ref":"NATGWB"
            },
            "RouteTableId":{
               "Ref":"PrivateSubnetRouteTableB"
            }
         }
      },
      "PrivateSubnetRouteTableAssocA":{
         "Type":"AWS::EC2::SubnetRouteTableAssociation",
         "Properties":{
            "RouteTableId":{
               "Ref":"PrivateSubnetRouteTableA"
            },
            "SubnetId":{
               "Ref":"PrivateSubnetA"
            }
         }
      },
      "PrivateSubnetRouteTableAssocB":{
         "Type":"AWS::EC2::SubnetRouteTableAssociation",
         "Properties":{
            "RouteTableId":{
               "Ref":"PrivateSubnetRouteTableB"
            },
            "SubnetId":{
               "Ref":"PrivateSubnetB"
            }
         }
      },
      "PublicSubnetRouteTableAssocA":{
         "Type":"AWS::EC2::SubnetRouteTableAssociation",
         "Properties":{
            "RouteTableId":{
               "Ref":"PublicSubnetRouteTable"
            },
            "SubnetId":{
               "Ref":"PublicSubnetA"
            }
         }
      },
      "PublicSubnetRouteTableAssocB":{
         "Type":"AWS::EC2::SubnetRouteTableAssociation",
         "Properties":{
            "RouteTableId":{
               "Ref":"PublicSubnetRouteTable"
            },
            "SubnetId":{
               "Ref":"PublicSubnetB"
            }
         }
      },
      "LoadBalancer":{
         "Type":"AWS::ElasticLoadBalancing::LoadBalancer",
         "Properties":{
            "Subnets":[
               {
                  "Ref":"PublicSubnetA"
               },
               {
                  "Ref":"PublicSubnetB"
               }
            ],
            "SecurityGroups":[
               {
                  "Ref":"PublicSecurityGroup"
               }
            ],
            "CrossZone":true,
            "LBCookieStickinessPolicy":[
               {
                  "PolicyName":"LBStickyPolicy",
                  "CookieExpirationPeriod":"18000"
               }
            ],
            "ConnectionDrainingPolicy":{
               "Enabled":true,
               "Timeout":300
            },
            "ConnectionSettings":{
               "IdleTimeout":600
            },
            "Listeners":[
               {
                  "Fn::If":[
                     "SSLVPNCert",
                     {
                        "LoadBalancerPort":"443",
                        "InstancePort":"443",
                        "Protocol":"HTTPS",
                        "InstanceProtocol":"HTTPS",
                        "PolicyNames":[
                           "LBStickyPolicy"
                        ],
                        "SSLCertificateId":{
                           "Ref":"SSLCertificateId"
                        }
                     },
                     {
                        "LoadBalancerPort":"443",
                        "InstancePort":"443",
                        "Protocol":"TCP"
                     }
                  ]
               },
               {
                  "LoadBalancerPort":"691",
                  "InstancePort":"691",
                  "Protocol":"TCP"
               }
            ],
            "HealthCheck":{
               "HealthyThreshold":"3",
               "Interval":"60",
               "Target":"TCP:691",
               "Timeout":"10",
               "UnhealthyThreshold":"3"
            },
            "Tags":[
               {
                  "Key":"Description",
                  "Value":"External Service Load Balancer"
               }
            ]
         },
         "DependsOn":[
            "IGWAttachment",
            "NATGWA",
            "NATGWB"
         ]
      },
      "LoadBalancerMGMT":{
         "Type":"AWS::ElasticLoadBalancing::LoadBalancer",
         "Properties":{
            "Subnets":[
               {
                  "Ref":"PublicSubnetA"
               },
               {
                  "Ref":"PublicSubnetB"
               }
            ],
            "SecurityGroups":[
               {
                  "Ref":"MgmtSecurityGroup"
               }
            ],
            "CrossZone":true,
            "ConnectionSettings":{
               "IdleTimeout":1200
            },
            "Listeners":[
               {
                  "LoadBalancerPort":"807",
                  "InstancePort":"807",
                  "Protocol":"TCP"
               }
            ],
            "HealthCheck":{
               "HealthyThreshold":"3",
               "Interval":"60",
               "Target":"TCP:22",
               "Timeout":"10",
               "UnhealthyThreshold":"3"
            },
            "Tags":[
               {
                  "Key":"Description",
                  "Value":"Management load balancer"
               }
            ]
         },
         "DependsOn":[
            "IGWAttachment",
            "NATGWA",
            "NATGWB"
         ]
      },
      "MyLaunchTemplate":{
         "Type":"AWS::EC2::LaunchTemplate",
          "Properties":{
            "LaunchTemplateName":{ "Fn::Sub": "${AWS::StackName}-launch-template" },
            "LaunchTemplateData":{
               "ImageId":{
               "Fn::FindInMap":[
                  {
                     "Fn::FindInMap":[
                        "amiMapMap",
                        {
                           "Ref":"ReleaseVersion"
                        },
                        "mapName"
                     ]
                  },
                  {
                     "Ref":"AWS::Region"
                  },
                  "Hourly"
               ]
            },
            "SecurityGroupIds":[
               {
                  "Ref":"NGFSecurityGroup"
               }
            ],
            "InstanceType":{
               "Ref":"InstanceType"
            },
           "IamInstanceProfile":{
             "Name": {
               "Ref": "IAMProfile"
             }   
            },
            "UserData":{
               "Fn::Base64":{
                  "Fn::Join":[
                     "\n",
                     [
                        "#!/bin/bash",
                        {
                           "Fn::Join":[
                              " ",
                              [
                                 "/opt/phion/bin/aws-asg-provision",
                                 "--bucket",
                                 {
                                    "Ref":"S3"
                                 },
                                 "--topic",
                                 {
                                    "Ref":"AWS::StackName"
                                 }
                              ]
                           ]
                        }
                     ]
                  ]
               }
            }
         }
      }
      },
      "SNSTopic":{
         "Type":"AWS::SNS::Topic",
         "Properties":{
            "DisplayName":{
               "Ref":"AWS::StackName"
            },
            "TopicName":{
               "Ref":"AWS::StackName"
            }
         }
      },
      "ASG":{
         "Type":"AWS::AutoScaling::AutoScalingGroup",
         "Properties":{
            "VPCZoneIdentifier":[
               {
                  "Ref":"PrivateSubnetA"
               },
               {
                  "Ref":"PrivateSubnetB"
               }
            ],
           "LaunchTemplate":{
                        "LaunchTemplateName":{ "Fn::Sub": "${AWS::StackName}-launch-template" },
                        "Version":1               
            },
            "MinSize":{
               "Ref":"InitialSize"
            },
            "DesiredCapacity":{
               "Ref":"InitialSize"
            },
            "MaxSize":{
               "Ref":"MaxSize"
            },
            "MetricsCollection":[
               {
                  "Granularity":"1Minute"
               }
            ],
            "LoadBalancerNames":[
               {
                  "Ref":"LoadBalancer"
               },
               {
                  "Ref":"LoadBalancerMGMT"
               }
            ],
            "HealthCheckType":"ELB",
            "HealthCheckGracePeriod":300
         },
         "DependsOn":[
            "IGWAttachment",
            "NATGWA",
            "NATGWB"
         ]
      },
      "FirewallScaleUpPolicy":{
         "Type":"AWS::AutoScaling::ScalingPolicy",
         "Properties":{
            "AdjustmentType":"ChangeInCapacity",
            "AutoScalingGroupName":{
               "Ref":"ASG"
            },
            "Cooldown":"600",
            "ScalingAdjustment":1
         }
      },
      "FirewallScaleDownPolicy":{
         "Type":"AWS::AutoScaling::ScalingPolicy",
         "Properties":{
            "AdjustmentType":"ChangeInCapacity",
            "AutoScalingGroupName":{
               "Ref":"ASG"
            },
            "Cooldown":"1800",
            "ScalingAdjustment":-1
         }
      },
      "C2STunnelsAlarmHigh":{
         "Type":"AWS::CloudWatch::Alarm",
         "Properties":{
            "AlarmDescription":"Scale out if the number of client-to-site tunnel exceed the limit for 10 minutes",
            "MetricName":"Client-to-site VPN Tunnels",
            "Namespace":"Barracuda/NGF",
            "Statistic":"Average",
            "Period":300,
            "EvaluationPeriods":2,
            "Threshold":{
               "Ref":"HighThreshold"
            },
            "AlarmActions":[
               {
                  "Ref":"FirewallScaleUpPolicy"
               }
            ],
            "Dimensions":[
               {
                  "Name":"AutoScalingGroupName",
                  "Value":{
                     "Ref":"ASG"
                  }
               }
            ],
            "ComparisonOperator":"GreaterThanThreshold"
         }
      },
      "C2STunnelsAlarmLow":{
         "Type":"AWS::CloudWatch::Alarm",
         "Properties":{
            "AlarmDescription":"Scale in if the number of client-to-site tunnels is lower for more than 20 minutes",
            "MetricName":"Client-to-site VPN Tunnels",
            "Namespace":"Barracuda/NGF",
            "Statistic":"Average",
            "Period":600,
            "EvaluationPeriods":2,
            "Threshold":{
               "Ref":"LowThreshold"
            },
            "AlarmActions":[
               {
                  "Ref":"FirewallScaleDownPolicy"
               }
            ],
            "Dimensions":[
               {
                  "Name":"AutoScalingGroupName",
                  "Value":{
                     "Ref":"ASG"
                  }
               }
            ],
            "ComparisonOperator":"LessThanThreshold"
         }
      }
   },
   "Outputs":{
      "ELBVPN":{
         "Description":"Service Elastic Load Balancer FQDN",
         "Value":{
            "Fn::GetAtt":[
               "LoadBalancer",
               "CanonicalHostedZoneName"
            ]
         }
      },
      "ELBMGMT":{
         "Description":"Management Elastic Load Balancer FQDN",
         "Value":{
            "Fn::GetAtt":[
               "LoadBalancerMGMT",
               "CanonicalHostedZoneName"
            ]
         }
      },
      "Password":{
         "Description":"",
         "Value":"For initial management password check __configNodeId tag of your Auto Scaling Group"
      }
   }
}
