{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Barracuda NextGen Firewall v8.0.1 - Auto Scaling Cluster in ELB Sandwich ",
    "Metadata" : {
        "AWS::CloudFormation::Interface" : {
            "ParameterGroups" : [
              {
                "Label" : {
                    "default": "Auto Scaling Group Settings"
                },
                "Parameters" : [
                    "InitialSize",
                    "MaxSize",
                    "HighThreshold",
                    "LowThreshold"
                ]
              },
              {
                "Label" : {
                    "default": "Launch Configuration Settings"
                },
                "Parameters" : [
                    "InstanceType",
                    "IAMProfile"
                ]
              },
              {
                "Label": {
                  "default": "Networking - VPC"
                },
                "Parameters": [
                  "VpcAddress"
                ]
              },
              {
                "Label": {
                  "default": "Networking - Zone A"
                },
                "Parameters": [
                  "PrivateSubnetAAddress",
                  "PublicSubnetAAddress",
                  "ZoneA"
                ]
              },
              {
                "Label": {
                  "default": "Networking - Zone B"
                },
                "Parameters": [
                  "PrivateSubnetBAddress",
                  "PublicSubnetBAddress",
                  "ZoneB"
                ]
              }
            ],
            "ParameterLabels" : {
              "ILBName": {
                "default": "Internal Load Balancer name"
              },
              "InitialSize": {
                "default": "Minimum Size"
              },
              "MaxSize": {
                "default": "Maximum Size"
              },
              "HighThreshold": {
                "default": "Scale-out Trigger"
              },
              "LowThreshold": {
                "default": "Scale-In Trigger"
              },
              "InstanceType": {
                "default": "Instance Type"
              },
              "IAMProfile": {
                "default": "IAM Profile"
              },
              "VpcAddress": {
                "default": "VPC Address"
              },
              "PrivateSubnetAAddress": {
                "default": "Private Subnet in Zone A"
              },
              "PrivateSubnetBAddress": {
                "default": "Private Subnet in Zone B"
              },
              "PublicSubnetAAddress": {
                "default": "Public Subnet in Zone A"
              },
              "PublicSubnetBAddress": {
                "default": "Public Subnet in Zone B"
              },
              "ZoneA": {
                "default": "Zone (A) to deploy to"
              },
              "ZoneB": {
                "default": "Zone (B) to deploy to"
              },
              "MgmtACL": {
                "default": "Management ACL"
              }

            }
        }
    },

    "Parameters": {
        "ILBName": {
            "Description": "Name of the internal Load Balancer. Must not be longer than 15 characters.",
            "Type": "String",
            "Default": "NGFsandwich-ILB",
            "MaxLength": 15,
            "ConstraintDescription": "ILB name for this architecture is limited to 15 characters."
        },
        "InitialSize": {
            "Description": "Initial size of the Auto Scaling Group.",
            "Type": "Number",
            "Default": "1",
            "MinValue": "1",
            "ConstraintDescription": "Initial size of the group cannot be less than 1"
        },
        "MaxSize": {
            "Description": "Maximum number of instances in the Auto Scaling Group.",
            "Type": "Number",
            "Default": "5",
            "MinValue": "2",
            "MaxValue": "248",
            "ConstraintDescription": "Maximum size of the group must be higher than initial size."
        },
        "InstanceType": {
            "Description": "Select the EC2 instance type.",
            "Type": "String",
            "Default": "t3.large",
            "AllowedValues": [
                "t2.small",
                "t3.small",
                "t3.medium",
                "t3.large",
                "m5.large",
                "m5.xlarge",
                "m5.2xlarge",
                "c5.large",
                "c5.xlarge",
                "c5.2xlarge"
            ]
        },
        "IAMProfile": {
            "Description": "Select the IAM Role for the NextGen Firewall.",
            "Type": "String",
            "Default": "NextGenFirewallRole"
        },
        "HighThreshold": {
            "Description": "Maximum number of network packets per instance.",
            "Type": "Number",
            "Default": "20000"
        },
        "LowThreshold": {
            "Description": "Number of packets per instance to trigger scaling in.",
            "Type": "Number",
            "Default": "2000"
        },
        "VpcAddress": {
          "Description": "IP address space for new VPC",
          "Type": "String",
          "Default": "192.168.0.0/16",
          "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
          "ConstraintDescription": "Use valid CIDR notation"
        },
        "PrivateSubnetAAddress": {
          "Description": "Private subnet hosting firewalls in A zone. Must be within VPC address space.",
          "Type": "String",
          "Default": "192.168.254.0/24",
          "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        },
        "PublicSubnetAAddress": {
          "Description": "Public helper subnet in A zone. Must be within VPC address space.",
          "Type": "String",
          "Default": "192.168.0.0/24",
          "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        },
        "PrivateSubnetBAddress": {
          "Description": "Private subnet hosting firewalls in B zone. Must be within VPC address space.",
          "Type": "String",
          "Default": "192.168.255.0/24",
          "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        },
        "PublicSubnetBAddress": {
          "Description": "Public helper subnet in B zone. Must be within VPC address space.",
          "Type": "String",
          "Default": "192.168.1.0/24",
          "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        },
        "ZoneA": {
          "Description": "",
          "Type": "AWS::EC2::AvailabilityZone::Name"
        },
        "ZoneB": {
          "Description": "",
          "Type": "AWS::EC2::AvailabilityZone::Name"
        },
        "MgmtACL": {
          "Description": "Allow access to management IP only from these addresses (CIDR notation)",
          "Type": "String",
          "Default": "0.0.0.0/0",
          "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        }
    },
    "Mappings": {
      "AMINGF": {
        "eu-north-1" : {
            "Hourly" : "ami-00bf83dcab37fd7cf",
            "BYOL" : "ami-036b2e65e5e8e081f",
            "Metered" : "ami-05e43b92ea01e4b21"
        },
        "ap-south-1" : {
            "Hourly" : "ami-0a4be0512550496c8",
            "BYOL" : "ami-07283e4a9e6dcee0a",
            "Metered" : "ami-09caabf3229074463"
        },
        "eu-west-3" : {
            "Hourly" : "ami-0a9dd6d6c8ab59a11",
            "BYOL" : "ami-0be9b19d142754812",
            "Metered" : "ami-09b6fa7bdb96e9ef0"
        },
        "eu-west-2" : {
            "Hourly" : "ami-0790acf4da1fecd35",
            "BYOL" : "ami-03fb103379de6016f",
            "Metered" : "ami-05837da1217e4fe54"
        },
        "eu-west-1" : {
            "Hourly" : "ami-06848ea3710d828fa",
            "BYOL" : "ami-0f2d0a099129b3667",
            "Metered" : "ami-0f5ecc7a2ec9fc5cc"
        },
        "ap-northeast-2" : {
            "Hourly" : "ami-04c0f332390c8f555",
            "BYOL" : "ami-00f185dff33c3dea2",
            "Metered" : "ami-07cb4a34abad166b0"
        },
        "ap-northeast-1" : {
            "Hourly" : "ami-0cb9804b1ed034e27",
            "BYOL" : "ami-00bb318ffb6910639",
            "Metered" : "ami-0010da4015d565fb1"
        },
        "sa-east-1" : {
            "Hourly" : "ami-0feb37a3856e7c12d",
            "BYOL" : "ami-007b43fd98e583f4c",
            "Metered" : "ami-09926de1146ab1dea"
        },
        "ca-central-1" : {
            "Hourly" : "ami-0c1f7da16d7e4e310",
            "BYOL" : "ami-0636644fb16edf1ae",
            "Metered" : "ami-094dd561adecd4128"
        },
        "ap-southeast-1" : {
            "Hourly" : "ami-0456d4100f9e5e89f",
            "BYOL" : "ami-02282407955523772",
            "Metered" : "ami-06d4ee98b95bf9351"
        },
        "ap-southeast-2" : {
            "Hourly" : "ami-03e93f7864c73283b",
            "BYOL" : "ami-0397ccf138c5c0c79",
            "Metered" : "ami-0d1bec16f6fbf0686"
        },
        "eu-central-1" : {
            "Hourly" : "ami-0e8b9bd14bd23f80d",
            "BYOL" : "ami-0f928b0e7f0f2db7b",
            "Metered" : "ami-00fb5d35d9d1948c6"
        },
        "us-east-1" : {
            "Hourly" : "ami-0af88d285bad8e1f4",
            "BYOL" : "ami-02b44974a96443938",
            "Metered" : "ami-00d9c4a2b7899c815"
        },
        "us-east-2" : {
            "Hourly" : "ami-03b885fc5e175cdf0",
            "BYOL" : "ami-0385fba05904f07a7",
            "Metered" : "ami-063ea558f5f4ee0e2"
        },
        "us-west-1" : {
            "Hourly" : "ami-00210a01884361541",
            "BYOL" : "ami-0161e1e37bb3e553d",
            "Metered" : "ami-0a4d40457d62043d4"
        },
        "us-west-2" : {
            "Hourly" : "ami-0043b621f0bff29da",
            "BYOL" : "ami-087c0bf72d15f85f5",
            "Metered" : "ami-01a5d11df2d78b008"
        }
      }
    },
    "Resources": {
        "PublicSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Security group for the ASG",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                  {
                      "IpProtocol": "-1",
                      "FromPort": "-1",
                      "ToPort": "-1",
                      "CidrIp": "0.0.0.0/0"
                  }
                ]
            }
        },
        "MgmtSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Security group for the Management ELB",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "TCP",
                        "FromPort": "807",
                        "ToPort": "807",
                        "CidrIp": { "Ref": "MgmtACL" }
                    },
                    {
                        "IpProtocol": "TCP",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": { "Ref": "MgmtACL" }
                    }
                ]
            }
        },
        "NGFSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Security group for the Management ELB",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "TCP",
                        "FromPort": "807",
                        "ToPort": "807",
                        "SourceSecurityGroupId": { "Ref": "MgmtSecurityGroup" }
                    },
                    {
                        "IpProtocol": "TCP",
                        "FromPort": "22",
                        "ToPort": "22",
                        "SourceSecurityGroupId": { "Ref": "MgmtSecurityGroup" }
                    },
                    {
                      "IpProtocol": "-1",
                      "FromPort": "-1",
                      "ToPort": "-1",
                      "SourceSecurityGroupId": { "Ref": "PublicSecurityGroup" }
                    }
                ]
            },
            "DependsOn": [
                "PublicSecurityGroup",
                "MgmtSecurityGroup"
            ]
        },
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Ref": "VpcAddress"
                },
            "Tags": [
              {
                "Key": "Name",
                "Value": { "Fn::Join": ["-", [{ "Ref": "AWS::StackName" }, "VPC" ]]}
              }
            ]
            }
        },
        "PrivateSubnetA": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Ref": "ZoneA"
                },
                "CidrBlock": {
                  "Ref": "PrivateSubnetAAddress"
                },
                "MapPublicIpOnLaunch": false,
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PublicSubnetA": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Ref": "ZoneA"
                },
                "CidrBlock": {
                  "Ref": "PublicSubnetAAddress"
                },
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PrivateSubnetB": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Ref": "ZoneB"
                },
                "CidrBlock": {
                  "Ref": "PrivateSubnetBAddress"
                },
                "MapPublicIpOnLaunch": false,
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PublicSubnetB": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Ref": "ZoneB"
                },
                "CidrBlock": {
                  "Ref": "PublicSubnetBAddress"
                },
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "IGW": {
            "Type": "AWS::EC2::InternetGateway"
        },
        "IGWAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "IGW"
                }
            }
        },
        "S3": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "AccessControl": "Private",
                "VersioningConfiguration": {
                    "Status": "Enabled"
                }
            }
        },
        "ElasticIPA": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc"
            },
            "DependsOn": [
                "IGWAttachment"
            ]
        },
        "ElasticIPB": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc"
            },
            "DependsOn": [
                "IGWAttachment"
            ]
        },
        "NATGWA": {
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "ElasticIPA",
                        "AllocationId"
                    ]
                },
                "SubnetId": {
                    "Ref": "PublicSubnetA"
                }
            },
            "DependsOn": [
                "IGWAttachment"
            ]
        },
        "NATGWB": {
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "ElasticIPB",
                        "AllocationId"
                    ]
                },
                "SubnetId": {
                    "Ref": "PublicSubnetB"
                }
            },
            "DependsOn": [
                "IGWAttachment"
            ]
        },
        "PublicSubnetRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PrivateSubnetRouteTableA": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PrivateSubnetRouteTableB": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PublicDefaultRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "IGWAttachment",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "IGW"
                },
                "RouteTableId": {
                    "Ref": "PublicSubnetRouteTable"
                }
            }
        },
        "PrivateDefaultRouteA": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "NATGWA",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "NATGWA"
                },
                "RouteTableId": {
                    "Ref": "PrivateSubnetRouteTableA"
                }
            }
        },
        "PrivateDefaultRouteB": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "NATGWB",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "NATGWB"
                },
                "RouteTableId": {
                    "Ref": "PrivateSubnetRouteTableB"
                }
            }
        },
        "PrivateSubnetRouteTableAssocA": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateSubnetRouteTableA"
                },
                "SubnetId": {
                    "Ref": "PrivateSubnetA"
                }
            }
        },
        "PrivateSubnetRouteTableAssocB": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateSubnetRouteTableB"
                },
                "SubnetId": {
                    "Ref": "PrivateSubnetB"
                }
            }
        },
        "PublicSubnetRouteTableAssocA": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicSubnetRouteTable"
                },
                "SubnetId": {
                    "Ref": "PublicSubnetA"
                }
            }
        },
        "PublicSubnetRouteTableAssocB": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicSubnetRouteTable"
                },
                "SubnetId": {
                    "Ref": "PublicSubnetB"
                }
            }
        },
        "LoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "Subnets": [
                    {
                        "Ref": "PublicSubnetA"
                    },
                    {
                        "Ref": "PublicSubnetB"
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "PublicSecurityGroup"
                    }
                ],
                "CrossZone": "True",
                "LBCookieStickinessPolicy": [
                    {
                        "PolicyName": "LBStickyPolicy",
                        "CookieExpirationPeriod": "18000"
                    }
                ],
                "ConnectionDrainingPolicy": {
                    "Enabled": "true",
                    "Timeout": "300"
                },
                "ConnectionSettings": {
                    "IdleTimeout": 600
                },
                "Listeners": [
                    {
                        "LoadBalancerPort": 443,
                        "InstancePort": 443,
                        "Protocol": "TCP"
                    },
                    {
                        "LoadBalancerPort": 80,
                        "InstancePort": 80,
                        "Protocol": "TCP"
                    }
                ],
                "HealthCheck": {
                    "HealthyThreshold": "3",
                    "Interval": "60",
                    "Target": "TCP:807",
                    "Timeout": "10",
                    "UnhealthyThreshold": "3"
                },
                "Tags": [
                  {
                    "Key": "Description",
                    "Value": "External Service Load Balancer"
                  }
                ]
            },
            "DependsOn": [
                "IGWAttachment",
                "NATGWA",
                "NATGWB"
            ]
        },
        "InternalLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "Subnets": [
                    {
                        "Ref": "PrivateSubnetA"
                    },
                    {
                        "Ref": "PrivateSubnetB"
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "PublicSecurityGroup"
                    }
                ],
                "CrossZone": "True",
                "LoadBalancerName": {
                  "Ref": "ILBName"
                },
                "Scheme" : "internal",
                "ConnectionDrainingPolicy": {
                    "Enabled": "true",
                    "Timeout": "300"
                },
                "ConnectionSettings": {
                    "IdleTimeout": 600
                },
                "Listeners": [
                    {
                        "LoadBalancerPort": 80,
                        "InstancePort": 80,
                        "Protocol": "TCP"
                    },
                    {
                      "LoadBalancerPort": 443,
                      "InstancePort": 443,
                      "Protocol": "TCP"
                    }
                ],
                "HealthCheck": {
                    "HealthyThreshold": "3",
                    "Interval": "60",
                    "Target": "TCP:80",
                    "Timeout": "10",
                    "UnhealthyThreshold": "3"
                }
            }
        },
        "LoadBalancerMGMT": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "Subnets": [
                    {
                        "Ref": "PublicSubnetA"
                    },
                    {
                        "Ref": "PublicSubnetB"
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "MgmtSecurityGroup"
                    }
                ],
                "CrossZone": "True",
                "ConnectionSettings": {
                    "IdleTimeout": 1200
                },
                "Listeners": [
                    {
                        "LoadBalancerPort": 807,
                        "InstancePort": 807,
                        "Protocol": "TCP"
                    }
                ],
                "HealthCheck": {
                    "HealthyThreshold": "3",
                    "Interval": "60",
                    "Target": "TCP:22",
                    "Timeout": "10",
                    "UnhealthyThreshold": "3"
                },
                "Tags": [
                  {
                    "Key": "Description",
                    "Value": "Management load balancer"
                  }
                ]
            },
            "DependsOn": [
                "IGWAttachment",
                "NATGWA",
                "NATGWB"
            ]
        },
        "LaunchConfiguration": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AMINGF",
                        {
                            "Ref": "AWS::Region"
                        },
                        "PAYG"
                    ]
                },
                "SecurityGroups": [
                    {
                        "Ref": "PublicSecurityGroup"
                    }
                ],
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "AssociatePublicIpAddress": false,
                "IamInstanceProfile": {
                    "Ref": "IAMProfile"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "\n",
                            [
                                "#!/bin/bash",
                                {"Fn::Sub": "/opt/aws/bin/aws s3 ls s3://${S3}/opt/phion/config >> /dev/null ||  curl -s https://raw.githubusercontent.com/barracudanetworks/ngf-aws-templates/master/ELB%20Sandwich/elb-sandwich-placeholder.fwrule | sed 's/placeholder.elb.amazonaws.com/${InternalLoadBalancer.DNSName}/g' > /tmp/active.fwrule && acpfrule check /tmp/active.fwrule && cp /tmp/active.fwrule /opt/phion/config/configroot/servers/S1/services/NGFW/ && cp /tmp/active.fwrule /opt/phion/config/active/servers/S1/services/NGFW/ && /opt/phion/modules/server/firewall/bin/activate"},
                                {"Fn::Sub": "/opt/phion/bin/aws-asg-provision --bucket ${S3} --topic ${AWS::StackName}"}
                            ]
                        ]
                    }
                }
            }
        },
        "SNSTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "DisplayName": {
                    "Ref": "AWS::StackName"
                },
                "TopicName": {
                    "Ref": "AWS::StackName"
                }
            }
        },
        "ASG": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": [
                    {
                        "Ref": "PrivateSubnetA"
                    },
                    {
                        "Ref": "PrivateSubnetB"
                    }
                ],
                "LaunchConfigurationName": {
                    "Ref": "LaunchConfiguration"
                },
                "MinSize": {
                    "Ref": "InitialSize"
                },
                "DesiredCapacity": {
                    "Ref": "InitialSize"
                },
                "MaxSize": {
                    "Ref": "MaxSize"
                },
                "MetricsCollection": [
                    {
                        "Granularity": "1Minute"
                    }
                ],
                "LoadBalancerNames": [
                    {
                        "Ref": "LoadBalancer"
                    },
                    {
                        "Ref": "LoadBalancerMGMT"
                    }
                ],
                "HealthCheckType": "ELB",
                "HealthCheckGracePeriod": 300
            },
            "DependsOn": [
                "IGWAttachment",
                "NATGWA",
                "NATGWB"
            ]
        },
        "FirewallScaleUpPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "ASG"
                },
                "Cooldown": "600",
                "ScalingAdjustment": "1"
            }
        },
        "FirewallScaleDownPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "ASG"
                },
                "Cooldown": "1800",
                "ScalingAdjustment": "-1"
            }
        },
        "PacketsHighAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale out if lots of network packets",
                "MetricName": "NetworkPacketsIn",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "300",
                "EvaluationPeriods": "1",
                "Threshold": {
                    "Ref": "HighThreshold"
                },
                "AlarmActions": [
                    {
                        "Ref": "FirewallScaleUpPolicy"
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                          "Ref": "ASG"
                        }
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold"
            },
            "DependsOn": "FirewallScaleUpPolicy"
        },
        "PacketsLowAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale in if a few network packets",
                "MetricName": "NetworkPacketsIn",
                "Namespace": "AWS/EC2",
                "Statistic": "Maximum",
                "Period": "300",
                "EvaluationPeriods": "1",
                "Threshold": {
                    "Ref": "LowThreshold"
                },
                "AlarmActions": [
                    {
                        "Ref": "FirewallScaleDownPolicy"
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                          "Ref": "ASG"
                        }
                    }
                ],
                "ComparisonOperator": "LessThanThreshold"
            },
            "DependsOn": "FirewallScaleDownPolicy"
        }
    },
    "Outputs": {
        "ELBFront": {
            "Description": "Service Elastic Load Balancer FQDN",
            "Value": {
                "Fn::GetAtt": [
                    "LoadBalancer",
                    "CanonicalHostedZoneName"
                ]
            }
        },
        "ELBMGMT": {
            "Description": "Management access FQDN",
            "Value": {
                "Fn::GetAtt": [
                    "LoadBalancerMGMT",
                    "CanonicalHostedZoneName"
                ]
            }
        },
        "Password": {
          "Description" : "",
          "Value": "For initial management password check __configNodeId tag of your Auto Scaling Group"
        }
    }
}
